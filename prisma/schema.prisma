// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Patient {
    id               String    @id @default(cuid())
    firstName        String
    lastName         String
    email            String?
    phone            String
    dateOfBirth      DateTime?
    bloodType        String?
    allergies        String?   @db.Text
    chronicConditions String?  @db.Text
    emergencyContact String?
    emergencyPhone   String?
    generalNotes     String?   @db.Text
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    bookings         Booking[]
    videoReviews     VideoReview[]

    @@index([email])
    @@index([phone])
}

model Service {
    id          String    @id @default(cuid())
    name        String
    description String?   @db.Text
    duration    Int       // in minutes
    price       Decimal?  @db.Decimal(10, 2)
    active      Boolean   @default(true)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    bookings    Booking[]

    @@index([active])
}

model Booking {
    id           String        @id @default(cuid())
    patientId    String
    patient      Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
    serviceId    String
    service      Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    date         DateTime
    startTime    DateTime
    endTime      DateTime
    city         String        // City where the appointment is
    notes        String?       @db.Text // Patient's notes when booking
    status       BookingStatus @default(PENDING)
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    sessionNotes SessionNote[]

    @@index([patientId])
    @@index([serviceId])
    @@index([date])
    @@index([status])
}

model SessionNote {
    id         String   @id @default(cuid())
    bookingId  String
    booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
    doctorNote String   @db.Text
    diagnosis  String?  @db.Text
    prescription String? @db.Text
    followUpRequired Boolean @default(false)
    followUpDate DateTime?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([bookingId])
}

enum BookingStatus {
    PENDING
    CONFIRMED
    CANCELLED
    COMPLETED
}

model Admin {
    id        String    @id @default(cuid())
    email     String    @unique
    password  String    // hashed password
    name      String
    role      AdminRole @default(ASSISTANT)
    active    Boolean   @default(true)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@index([email])
    @@index([role])
}

enum AdminRole {
    ADMIN
    ASSISTANT
}

model VideoReview {
    id          String   @id @default(cuid())
    patientId   String
    patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
    patientName String   // Display name for the review
    videoUrl    String   // YouTube, Vimeo, or other video URL
    thumbnailUrl String? // Optional custom thumbnail
    title       String?  // Optional title for the review
    treatment   String?  // What treatment they received
    isActive    Boolean  @default(true)
    order       Int      @default(0) // For sorting/ordering videos
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([patientId])
    @@index([isActive])
    @@index([order])
}
